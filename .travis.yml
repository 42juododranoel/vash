language: bash


addons:
  apt:
    packages:
    - sshpass
    - docker-ce


before_install:
  - export COMMIT=`echo ${TRAVIS_COMMIT:0:7}`  # Shorten commit hash

  # Directories
  - export PARENT_DIRECTORY=/home/travis/build/vsevolod-skripnik
  - export ROOT_DIRECTORY=${TRAVIS_BUILD_DIR}
  - export MEDIA_DIRECTORY=${TRAVIS_BUILD_DIR}/resources/media
  - export STATIC_DIRECTORY=${TRAVIS_BUILD_DIR}/resources/static
  - export CERTBOT_DIRECTORY=${TRAVIS_BUILD_DIR}/resources/certbot

  # Production-related environment, shortcut `on_production`
  - export SSHPASS=${PRODUCTION_SERVER_PASSWORD}
  - alias on_production='sshpass -e ssh ${PRODUCTION_SERVER_USERNAME}@${PRODUCTION_SERVER_HOST}'
  - shopt -s expand_aliases
  - ssh-keyscan -t rsa ${PRODUCTION_SERVER_HOST} > ~/.ssh/known_hosts
  - export PRODUCTION_DATABASE_BACKUP_PATH=/tmp/vash_database.sql
  - export PRODUCTION_USER_ID=`(on_production 'id -u')`
  - export HOST_USER_ID=${PRODUCTION_USER_ID}

  # Get Nginx image names and filename
  - export DOCKER_NGINX_IMAGE=vash_nginx:${COMMIT}
  - export DOCKER_NGINX_IMAGE_FILENAME=`echo ${DOCKER_NGINX_IMAGE/:/_}.tar`

  # Get Django image name and filename
  - export DOCKER_DJANGO_IMAGE=vash_django:${COMMIT}
  - export DOCKER_DJANGO_IMAGE_FILENAME=`echo ${DOCKER_DJANGO_IMAGE/:/_}.tar`

  # Get Postgres image name and filename
  - export docker_postgres_line=`cat .env | grep DOCKER_POSTGRES_IMAGE`
  - export DOCKER_POSTGRES_IMAGE=`echo ${docker_postgres_line/DOCKER_POSTGRES_IMAGE=/}`
  - export DOCKER_POSTGRES_IMAGE_FILENAME=`echo ${DOCKER_POSTGRES_IMAGE/:/_}.tar`

  # Download production database to migrate
  - >
    on_production "
      echo > ${PRODUCTION_DATABASE_BACKUP_PATH}
      chown 660 ${PRODUCTION_DATABASE_BACKUP_PATH}
      docker exec vash_postgres_1 pg_dump -U vash vash > ${PRODUCTION_DATABASE_BACKUP_PATH}
    "
  - >
    sshpass \
      -e scp \
      ${PRODUCTION_SERVER_USERNAME}@${PRODUCTION_SERVER_HOST}:${PRODUCTION_DATABASE_BACKUP_PATH} \
      /tmp/vash_database.sql
  - on_production "rm -rf ${PRODUCTION_DATABASE_BACKUP_PATH}"


install:
  # Build and run
  - >
    docker-compose \
      -f compose/nginx.yml \
      -f compose/django.yml \
      -f compose/postgres.yml \
      -f compose/production.yml \
      --project-directory . \
      up \
      -d \
      --build

  # Wait for Postgres to get ready
  - >
    until [[ "$( docker exec vash_postgres_1 pg_isready )" ]];
    do echo 'Sleeping.'; sleep 5s; done

  # Wait for Postgres to create a database
  - >
    while [ "$( docker exec vash_postgres_1 psql -U vash -tAc "SELECT 1 FROM pg_database WHERE datname='vash'" )" != '1' ];
    do echo 'Sleeping.'; sleep 5s; done

  # Wait for Postgres to get ready again. Postgres restarts after creating a database
  - >
    until [[ "$( docker exec vash_postgres_1 pg_isready )" ]];
    do echo 'Sleeping.'; sleep 5s; done

  # Load backup and migrate
  - docker cp /tmp/vash_database.sql vash_postgres_1:/tmp
  - docker exec vash_postgres_1 bash -c "psql -U vash vash < /tmp/vash_database.sql"
  - docker exec vash_django_1 python manage.py migrate --noinput

  # Collect static
  - sudo chown -R ${PRODICTION_USER_ID}:travis ${STATIC_DIRECTORY}
  - ls -lah ${STATIC_DIRECTORY}
  - docker exec vash_django_1 python manage.py collectstatic --noinput
